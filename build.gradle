plugins {
    id 'dev.clojurephant.clojure' version '0.8.0-beta.7'
    id 'java'
    id 'scala'
    id 'application'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = 'clojars'
        url = 'https://repo.clojars.org'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

scala {
    scalaVersion = "3.3.5"
}

 application {
     mainClass = 'org.example.hello'
 }

dependencies {
    testImplementation 'org.testng:testng:7.11.0'
    testImplementation 'org.assertj:assertj-core:4.0.0-M1'

    // Clojure
    implementation 'org.clojure:clojure:1.12.0'
    implementation 'org.clojure:java.data:1.3.113'
    testRuntimeOnly 'org.ajoberstar:jovial:0.3.0'
    implementation 'com.taoensso:telemere:1.0.0-RC5'
    // CIDER
    devImplementation 'nrepl:nrepl:1.3.1'
    devImplementation 'cider:cider-nrepl:0.53.2'
    devImplementation 'org.clojure:tools.namespace:1.5.0'
    // Scala
    implementation 'org.scala-lang:scala3-library_3:3.3.5'
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala']
        }
        clojure {
            srcDirs = ['src/main/clojure']
        }
    }
    test {
        scala {
            srcDirs = ['src/test/scala']
        }
        clojure {
            srcDirs = ['src/test/clojure']
        }
    }
}

// task compileClojure(type: JavaCompile) {
//     source = sourceSets.main.clojure
//     classpath = sourceSets.main.compileClasspath
//     destinationDir = sourceSets.main.output.classesDirs.singleFile
//     options.compilerArgs = ['-cp', classpath.asPath]
// }

// task compileScala(type: ScalaCompile) {
//     source = sourceSets.main.scala
//     classpath = sourceSets.main.compileClasspath + files(compileClojure.destinationDir)
//     destinationDir = sourceSets.main.output.classesDirs.singleFile
// }

checkClojure.dependsOn compileScala

// compileJava {
//     dependsOn compileScala
// }

//tasks.withType(JavaCompile) {
//    options.encoding = 'UTF-8'
//}

// tasks.withType(ScalaCompile) {
//     scalaCompileOptions.useAnt = false
// }

//compileClojure {
//    doLast {
//        println 'Clojure compilation completed.'
//    }
//}
//
//compileScala {
//    doLast {
//        println 'Scala compilation completed.'
//    }
//}

def patchModuleArg = "--patch-module=jdk.compiler=" +
        files(sourceSets.main.java.srcDirs, sourceSets.test.java.srcDirs).asPath

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.addAll([
            '--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            // '--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            patchModuleArg,
            '-Xmaxerrs', '10000',
            '-Xmaxwarns', '10000',
            '-Awarns'
    ])
}

// If you need --add-opens at runtime, keep this:
tasks.withType(JavaExec).configureEach {
    jvmArgs += ['--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED']
}

tasks.withType(Test).configureEach {
    useTestNG()
    maxHeapSize = '16G'
}

//tasks.named('checkClojure').configure {
//    enabled = false
//}

//clojure {
//    builds {
//        main {
//            aotNamespaces = ["org.example.hello"]
//        }
//    }
//}

wrapper {
    gradleVersion = '8.13'
}
