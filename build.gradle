plugins {
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'io.freefair.lombok' version '8.12.1'
    id 'org.checkerframework' version '0.6.53'
    id 'com.diffplug.spotless' version "7.0.2"

    id 'dev.clojurephant.clojure' version '0.8.0-beta.7'
    id 'scala'
    id 'application'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = 'clojars'
        url = 'https://repo.clojars.org'
    }
}

lombok { version = "1.18.38" }

scala {
    scalaVersion = "3.6.4"
}

application {
    mainClassName = 'org.example.HelloScala'
}

dependencies {
    implementation 'org.functionaljava:functionaljava:5.0'
    implementation 'com.google.guava:guava:33.4.6-jre'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    implementation 'org.slf4j:slf4j-api:2.1.0-alpha1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'

    compileOnly 'org.checkerframework:checker-qual:3.49.2'
    testCompileOnly 'org.checkerframework:checker-qual:3.49.2'
    checkerFramework 'org.checkerframework:checker:3.49.2'
    implementation 'org.checkerframework:checker-util:3.49.2'

    testImplementation 'org.testng:testng:7.11.0'
    testImplementation 'org.assertj:assertj-core:4.0.0-M1'

    // Clojure
    implementation 'org.clojure:clojure:1.12.0'
    implementation 'org.clojure:java.data:1.3.113'
    testRuntimeOnly 'org.ajoberstar:jovial:0.3.0'
    devImplementation 'org.clojure:tools.namespace:1.5.0'
    implementation 'com.taoensso:telemere:1.0.0-RC5'
    // CIDER
    devImplementation 'nrepl:nrepl:1.3.1'
    devImplementation 'cider:cider-nrepl:0.53.2'
    devImplementation 'org.clojure:tools.namespace:1.3.0'

    // Scala
    implementation("org.scala-lang:scala3-library_3:3.6.4")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

def patchModuleArg = "--patch-module=jdk.compiler=" +
        files(sourceSets.main.java.srcDirs, sourceSets.test.java.srcDirs).asPath

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.addAll([
            '--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            // '--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            patchModuleArg,
            '-Xmaxerrs', '10000',
            '-Xmaxwarns', '10000',
            '-Awarns'
    ])
}

// If you need --add-opens at runtime, keep this:
tasks.withType(JavaExec).configureEach {
    jvmArgs += ['--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED']
}

spotless {
    java {
        eclipse().configFile("${rootProject.projectDir}/eclipse-java-google-style.xml")
        importOrder('', '\\#')
                .wildcardsLast(false)
                .semanticSort()
        removeUnusedImports()
        formatAnnotations()
    }
}

checkerFramework {
    checkers = [
            'org.checkerframework.checker.nullness.NullnessChecker'
    ]
}

clojure {
    builds {
        main {
            aotAll()
        }
    }
}

tasks.withType(Test).configureEach {
    useTestNG()
    maxHeapSize = '16G'
}

wrapper {
    gradleVersion = '8.13'
}
